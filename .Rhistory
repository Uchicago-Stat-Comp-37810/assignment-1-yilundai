i <- 0.03
} else {
i <- 0.05
}
gic <- p * ((1 + i)^n - 1)
return(gic)
}
gic_return(1, 2)
gic_return <- function(P, n) {
i <- 0
if(n <= 3) {
i <- 0.03
} else {
i <- 0.05
}
I <- P * ((1 + i)^n - 1)
return(I)
}
gic_return(1, 2)
mortgage <- function(n, P, open){
if(open == TRUE){
i <- 0.05
} else {
i <- 0.04
}
R <- P * i / (1 - (1 + i)^(-n))
return(R)
}
mortgage(1, 2, TRUE)
Fibonacci <- c(1, 1)
while (Fibonacci < 300) {
Fibonacci <- c(Fibonacci, Fibonacci[length(Fibonacci)] +
Fibonacci[length(Fibonacci)-1])
}
Fibonacci <- c(1, 1)
while (Fibonacci[length(Fibonacci)] < 300) {
Fibonacci <- c(Fibonacci, Fibonacci[length(Fibonacci)] +
Fibonacci[length(Fibonacci)-1])
}
Fibonacci
Fibonacci <- c(1, 1)
while (Fibonacci[length(Fibonacci)]+
Fibonacci[length(Fibonacci)-1] < 300) {
Fibonacci <- c(Fibonacci, Fibonacci[length(Fibonacci)] +
Fibonacci[length(Fibonacci)-1])
}
Fibonacci
i <- c(0.006, (1-(1+0.006)^-20)/19)
while (abs(i[length(i)] - i[length(i) -1]) >= 0.000001){
i <- c(i, (1-(1+i[length(i)])^-20)/19)
}
i
i <- c(0.006, (1-(1+0.006)^-20)/19)
while (abs(i[length(i)] - (1-(1+i[length(i)])^-20)/19) >= 0.000001){
i <- c(i, (1-(1+i[length(i)])^-20)/19)
}
i
i <- c(0.006, (1-(1+0.006)^-20)/19)
while (abs(i[length(i)] - (1-(1+i[length(i)])^-20)/19) >= 0.000001){
i <- c(i, (1-(1+i[length(i)])^-20)/19)
}
i_value <- i[length(i)]
i_value
i <- c(0.006, (1-(1+0.006)^-20)/19)
j <- 0
while (abs(i[length(i)] - (1-(1+i[length(i)])^-20)/19) >= 0.000001){
i <- c(i, (1-(1+i[length(i)])^-20)/19)
j <- j + 1
}
i_value <- i[length(i)]
i_value
print(j)
i <- c(0.006, (1-(1+0.006)^-20)/19)
num_iter <- 0
while (abs(i[length(i)] - (1-(1+i[length(i)])^-20)/19) >= 0.000001){
i <- c(i, (1-(1+i[length(i)])^-20)/19)
num_iter <- num_iter + 1
}
i_value <- i[length(i)]
i_value
print(num_iter)
sieve <- seq(2, 6)
sieve <- sieve[sieve %% 2 != 0]
sieve
Eratosthenes <- function(n) {
if (n >= 2) {
sieve <- seq(2, n)
primes <- c()
repeat{
if(length(sieve) <= 0) break
p <- sieve[1]
primes <- c(primes, p)
sieve <- sieve[(sieve %% p) != 0]
}
return(primes)
} else {
stop("Input value of n should be at least 2.") }
}
Eratosthenes(6)
Eratosthenes <- function(n) {
if (n >= 2) {
sieve <- seq(2, n)
primes <- c()
repeat{
if(length(sieve) <= 0) break
p <- sieve[1]
primes <- c(primes, p)
sieve <- sieve[(sieve %% p) != 0]
}
return(primes)
} else {
stop("Input value of n should be at least 2.") }
}
Eratosthenes(10)
Fibonacci <- numeric(30)
Fibonacci[1] <- Fibonacci[2] <- 1
for (i in 3:30)
Fibonacci[i] <- Fibonacci[i - 2] + Fibonacci[i - 1]
Ratios <- numeric(29)
for (i in 2:29)
Ratios[i-1] <- Fibonacci[i] / Fibonacci[i-1]
Ratios
golden_ratio <- (1 + sqrt(5)) / 2
golden_ratio
difference <- NULL
for (i in 1:29) {
difference <- c(difference, abs(Ratios[i] - golden_ratio))
}
print(difference)
var()
?var()
?var()
?cos()
Ng <- compound.interest(1000, 0.01, 30)
compound.interest <- function(P, i.r, n){
interest <- P * (1 + i.r)^n
return(interest)
}
Ng <- compound.interest(1000, 0.01, 30)
print(Ng)
find_zero <- function(a, b, f){
if(f(a) * f(b) < 0){
while((f(a) * f(b) < 0) & (a != b)){
mid <- (a+b)
if(f(a) * f(mid) < 0){
b <- mid
} else {
a <- mid
}
}
return(a)
} else if(f(a) == 0) {
return(a)
} else if(f(b) == 0) {
return(b)
} else {
stop("f(a) and f(b) should be of opposite sign.")
}
}
f1 <- function(x){
x^2 - 1
}
find_zero(0, 2, f1)
find_zero <- function(a, b, f){
if(f(a) * f(b) < 0){
while((f(a) * f(b) < 0) & (a != b)){
mid <- (a+b)
if(f(a) * f(mid) < 0){
b <- mid
} else {
a <- mid
}
}
return(a)
} else if(f(a) == 0) {
return(a)
} else if(f(b) == 0) {
return(b)
} else {
stop("f(a) and f(b) should be of opposite sign.")
}
}
f1 <- function(x){
x^2 - 1
}
y <- find_zero(0, 2, f1)
find_zero <- function(a, b, f){
if(f(a) * f(b) < 0){
while((a != b)){
mid <- (a+b)
if(f(a) * f(mid) < 0){
b <- mid
} else {
a <- mid
}
}
return(a)
} else if(f(a) == 0) {
return(a)
} else if(f(b) == 0) {
return(b)
} else {
stop("f(a) and f(b) should be of opposite sign.")
}
}
f1 <- function(x){
x^2 - 1
}
y <- find_zero(0, 2, f1)
find_zero <- function(a, b, f){
if(f(a) * f(b) < 0){
while((a != b)){
mid <- (a+b)
if(f(a) * f(mid) < 0){
b <- mid
} else {
a <- mid
}
}
return(a)
} else if(f(a) == 0) {
return(a)
} else if(f(b) == 0) {
return(b)
} else {
stop("f(a) and f(b) should be of opposite sign.")
}
}
f1 <- function(x){
y <- x^2 - 1
return(y)
}
y <- find_zero(0, 2, f1)
Ng <- compound.interest(1000, 0.01, 30)
print(Ng)
f1 <- function(x){
y <- x^2 -1
return(y)
}
f1 <- function(x){
y <- x
return(y)
}
f1 <- function(x){
y <- x^2 -1
return(y)
}
f1 <- function(x){
y <- x^2 -1
return(y)
}
f1(0)
f1 <- function(x){
y <- x^2 -1
return(y)
}
find_zero(0, 2, f1())
f1 <- function(x){
y <- x^2 -1
return(y)
}
find_zero(0, 2, f1)
find_zero <- function(a, b, f(a), f(b)){
find_zero <- function(a, b, f()){
find_zero <- function(a, b, f){
if(f(a) * f(b) < 0){
while((a != b)){
mid <- (a+b)
if(f(a) * f(mid) < 0){
b <- mid
} else {
a <- mid
}
}
return(a)
} else if(f(a) == 0) {
return(a)
} else if(f(b) == 0) {
return(b)
} else {
stop("f(a) and f(b) should be of opposite sign.")
}
}
f1 <- function(x){
y <- x^2 -1
return(y)
}
find_zero(0, 2, f = f1)
find_zero <- function(a, b, f){
if(f(a) * f(b) < 0){
while((a != b)){
mid <- (a+b)/2
if(f(a) * f(mid) < 0){
b <- mid
} else {
a <- mid
}
}
return(a)
} else if(f(a) == 0) {
return(a)
} else if(f(b) == 0) {
return(b)
} else {
stop("f(a) and f(b) should be of opposite sign.")
}
}
f1 <- function(x){
y <- x^2 -1
return(y)
}
find_zero(0, 2, f = f1)
find_zero <- function(a, b, f){
if(f(a) * f(b) < 0){
while((a != b)){
mid <- (a+b)/2
if(f(a) * f(mid) < 0){
b <- mid
} else {
a <- mid
}
}
return(a)
} else if(f(a) == 0) {
return(a)
} else if(f(b) == 0) {
return(b)
} else {
stop("f(a) and f(b) should be of opposite sign.")
}
}
f1 <- function(x){
y <- x^2 -1
return(y)
}
find_zero(0, 2, f = f1)
directpoly <- function(x, coefficients){
n <- length(coefficients)
P <- 0
i <- 1
while(i <= n){
P <- P + coefficients[i] * (x^(i-1))
i <- i + 1
}
return(P)
}
directpoly(2, seq(1,3))
1*1 + 2 * 2 + 3 * 4
results <- numeric(3000000)
x <- 123
for (i in 1:3000000) {
x <- (65539*x) %% (2^31)
results[i] <- round(x / (2^31), 3)
}
M <- matrix(results, ncol = 3, byrow = TRUE)
M
M <- matrix(results, ncol = 3, byrow = TRUE)
results <- numeric(3000000)
x <- 0.1
for (i in 1:3000000) {
x <- (65539*x) %% (2^31)
results[i] <- round(x / (2^31), 3)
}
M <- matrix(results, ncol = 3, byrow = TRUE)
M
A = M[M[,1] == 0.1, drop = FALSE]
A
A = M[M[,1] == 0.1, ]
A
results <- numeric(3000000)
x <- 123
for (i in 1:3000000) {
x <- (65539*x) %% (2^31)
results[i] <- round(x / (2^31), 3)
}
M <- matrix(results, ncol = 3, byrow = TRUE)
A = M[M[,1] == 0.1, ]
A
M
results <- numeric(3000000)
y <- 123
for (i in 1:3000000) {
y <- (65539*y) %% (2^31)
results[i] <- round(y / (2^31), 3)
}
M <- matrix(results, ncol = 3, byrow = TRUE)
x <- 0.1
A = M[M[,1] == x, ]
plot(A[,2], A[,3])
xvals <- seq(1,9)
xvals <- xvals/10
x <- 0.1
A = M[M[,1] == x, ]
A2A3 <- plot(A[,2], A[,3])
A2A3
xvals <- seq(1,9)
xvals <- xvals/10
plots <- numeric(9)
for(i in 1:9){
A <- M[M[,1] == xvals[i], ]
plots[i] <- plot(A[,2], A[,3])
}
xvals <- seq(1,9)
xvals <- xvals/10
par(mfrow=c(3,3))
for(i in 1:9){
A <- M[M[,1] == xvals[i], ]
plot(A[,2], A[,3])
}
xvals <- seq(1,9)
xvals <- xvals/10
par(mfrow=c(1,9))
for(i in 1:9){
A <- M[M[,1] == xvals[i], ]
plot(A[,2], A[,3])
}
xvals <- seq(1,9)
xvals <- xvals/10
par(mfrow=c(2,5))
for(i in 1:9){
A <- M[M[,1] == xvals[i], ]
plot(A[,2], A[,3])
}
xvals <- seq(1,9)
xvals <- xvals/10
par(mfrow=c(3,3))
for(i in 1:9){
A <- M[M[,1] == xvals[i], ]
plot(A[,2], A[,3])
}
xvals <- seq(1,9)
xvals <- xvals/10
quartz()
par(mfrow=c(3,3))
for(i in 1:9){
A <- M[M[,1] == xvals[i], ]
plot(A[,2], A[,3])
}
?quartz()
?quartz.options()
?quartz.options()
setwd("~/Documents/Documents/Fall2018/StatsComputingA/assignment-1-yilundai")
xvals <- seq(1,9)
xvals <- xvals/10
quartz()
par(mfrow=c(3,3))
for(i in 1:9){
A <- M[M[,1] == xvals[i], ]
plot(A[,2], A[,3])
}
quartz.save('Chapter4Exercise1Plot', 'png')
xvals <- seq(1,9)
xvals <- xvals/10
quartz()
par(mfrow=c(3,3))
for(i in 1:9){
A <- M[M[,1] == xvals[i], ]
plot(A[,2], A[,3])
}
quartz.save('Chapter4Exercise1Plot', 'png')
hornerpoly <- function(x, coefficients){
a <- coefficients[length(coefficients)]
n = length(coefficients)
while(n >= 1){
a <- a*x + coefficients[n]
n <- n - 1
}
return(a)
}
hornerpoly(2, seq(1,3))
directpoly(2, seq(1,3))
hornerpoly <- function(x, coefficients){
a <- coefficients[length(coefficients)]
n = length(coefficients) - 1
while(n >= 1){
a <- a*x + coefficients[n]
n <- n - 1
}
return(a)
}
hornerpoly(2, seq(1,3))
hornerpoly((2,2), seq(1,3))
hornerpoly(c(2,2), seq(1,3))
hornerpoly(c(2,2,3), seq(1,3))
directpoly(3, seq(1,3))
print(factorial(10), factorial(50), factorial(100), factorial(1000))
print(factorial(10))
print(factorial(50))
print(factorial(100))
print(factorial(1000))
i <- 1
answer <- 1
while(i <= 1000){
answer <- answer * i
i <- i + 1
}
answer
i <- 1
answer <- 1
while(i <= 100){
answer <- answer * i
i <- i + 1
}
answer
i <- 1
answer <- 1
while(i <= 1000){
answer <- answer * i
i <- i + 1
}
answer
?fix()
